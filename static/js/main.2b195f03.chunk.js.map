{"version":3,"sources":["components/FormTasks.js","components/Panel.js","components/Tasks.js","components/CommentAvatar.js","components/CommentsList.js","components/TasksList.js","App.js","serviceWorker.js","index.js"],"names":["FormTasks","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","event","preventDefault","value","refs","input","getValue","react_default","a","createElement","className","onSubmit","type","placeholder","ref","React","Component","Panel","Tasks","eachTasks","i","deleteTask","listComments","task","key","id","onClick","openListComments","comments","length","onDeleteTask","tasks","map","CommentAvatar","identifier","Form","state","taskId","keys","newComment","handleSubmitKeybord","resetKeys","handleChange","accepter","push","find","getState","setState","console","log","intervalId","setInterval","clearInterval","keyCode","concat","onKeyDown","onChange","CommentsList","_this2","eachComent","receiveState","e","setArrayOfComments","currentComment","comment","components_CommentAvatar","CommentsList_Form","onStage","TasksList","index","currentIdComment","stage","setListTasks","handleDeleteTask","handleSetComments","findCurrentComment","setValueByNewFormTasks","localStorage","getItem","JSON","parse","isLoading","fetchData","nextProps","nextState","setItem","stringify","arrListTasks","splice","newTasksObject","defineProperty","arrId","undefined","Math","max","apply","components_FormTasks","components_Tasks","components_CommentsList","App","src_components_Panel","components_TasksList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b195f03.chunk.js","sourcesContent":["import React from 'react';\nimport './Stylesheet.css';\n\nclass FormTasks extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let value = this.refs.input.value;\n\n        this.props.getValue(value);\n\n        this.refs.input.value = '';\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"form-group\">\n                    <h2>Items</h2>\n                    <form onSubmit={this.handleSubmit} className=\"form ng-valid ng-dirty ng-touched\">\n                        <div className=\"row add-wrapper\">\n                            <div className=\"col-9\">\n                                <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"Type name here...\"\n                                    ref=\"input\"\n                                />\n                            </div>\n                            <div className=\"col-3\">\n                                <button type=\"summit\" className=\"btn btn-info added-btn\">Add new</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default FormTasks;","import React from 'react';\nimport '../App.css';\nimport './Panel.css';\n\nclass Panel extends React.Component {\n    render() {\n        return (\n            <div className=\"panel col-2\">\n                    <div className=\"wrapper\">\n                        <div className=\"content_p\">\n                            <h1 className=\"title p-2\">dairy app</h1>\n                            <p className=\"subtitle\"> Comment with no sense </p>\n                        </div>\n                    </div>\n            </div>\n        );\n    }\n}\n\nexport default Panel;","import React from 'react';\nimport './Stylesheet.css';\n\nclass Tasks extends React.Component {\n    constructor(props){\n        super(props);\n        this.eachTasks = this.eachTasks.bind(this);\n    }\n\n    onDeleteTask(i) {\n        this.props.deleteTask(i);\n    }\n\n    openListComments(i) {\n        this.props.listComments(i);\n    }\n\n    eachTasks(task) {\n        return (\n            <div key={task.id} onClick={this.openListComments.bind(this, task.id)} className=\"item\">\n                <p className=\"item-name\">{task.task}</p>\n                <span className=\"point\">{task.comments.length}</span>\n                <button ref={task.id} onClick={this.onDeleteTask.bind(this, task.id)} className=\"delete-btn\">Delete</button>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.tasks.map(this.eachTasks)}\n            </div>\n        );\n    }\n}\n\nexport default Tasks ;","import React from \"react\";\n\n\nclass CommentAvatar extends React.Component {\n\n    render() {\n        if (this.props.identifier%2 === 0) {\n            return (\n                <div className=\"col-1 avatar avatar-props-1\"></div>\n            );\n        } else {\n            return (\n                <div className=\"col-1 avatar avatar-props-2\"></div>\n            );\n        }\n    }\n}\n\nexport default CommentAvatar;","import React from 'react';\nimport CommentAvatar from './CommentAvatar';\nimport './Stylesheet.css';\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            taskId: this.props.taskId,\n            keys: [],\n            value: '',\n            newComment: []\n        };\n        this.handleSubmitKeybord = this.handleSubmitKeybord.bind(this);\n        this.resetKeys = this.resetKeys.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentWillUpdate(event) {\n        var accepter = [];\n        this.state.keys.map(key => {\n            accepter.push(key)\n        });\n\n        if (accepter.find(key => key === 13) && accepter.find(key => key === 17)) {\n            const comments = this.state.value;\n            this.props.getState(this, this.state.value);\n            this.setState({\n                newComment: comments,\n                value: ''\n            });\n            console.log(\"CommentsList_componentWillUpdate_find props of comments\", this.state.newComment);\n        }\n    }\n\n    componentDidMount() {\n        var intervalId = setInterval(this.resetKeys, 100);\n        this.setState({intervalId: intervalId});\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.intervalId);\n    }\n\n    resetKeys() {\n        this.setState({\n            keys: []\n        });\n    }\n\n    handleSubmitKeybord(event) {\n        var map = [event.keyCode];\n        this.setState({\n            keys: this.state.keys.concat(map)\n        });\n    }\n\n    handleChange() {\n        var value = this.refs.value.value;\n        this.setState({\n            value: value\n        });\n    }\n\n    render() {\n\n        return (\n            <div className=\"new-comment-container\">\n                <div className=\"row\">\n                    <div className=\"col-1 avatar avatar-props-0\">\n                    </div>\n                    <div className=\"col-11\">\n                        <form>\n                            <textarea\n                                type=\"text\"\n                                onKeyDown={this.handleSubmitKeybord}\n                                ref=\"value\"\n                                value={this.state.value}\n                                onChange={this.handleChange}\n                                className=\"textarea\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nclass CommentsList extends React.Component {\n    constructor(props){\n        super(props);\n        this.eachComent = this.eachComent.bind(this);\n        this.receiveState = this.receiveState.bind(this);\n    }\n\n    receiveState(e) {\n        this.props.setArrayOfComments(e.state.value, e.state.taskId);\n    }\n\n    eachComent(task) {\n        if (task.id === this.props.currentComment) {\n            return (\n                <div key={task.id} className=\"content\">\n                    <div className=\"container\">\n                        <h2>{task.task}</h2>\n                        <div className=\"comments-wrapper\">\n                            <div>\n                                <div className=\"comment\">\n                                    {task.comments.map((comment, key) => {\n                                        return (\n                                            <div key={key} className=\"comment-container\">\n                                                <div className=\"row\">\n                                                    <CommentAvatar comment={comment} identifier={key}/>\n                                                    <div className=\"col-11\">\n                                                        <p className=\"text\">{comment}</p>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                                <Form taskId={task.id} getState={this.receiveState}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n\n\n    render() {\n        if (!!this.props.onStage) {\n            return (\n                <div>\n                    {this.props.tasks.map(this.eachComent)}\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default CommentsList ;","import React from 'react';\nimport Tasks from './Tasks';\nimport CommentsList from './CommentsList';\nimport FormTasks from \"./FormTasks\";\nimport './Stylesheet.css';\n\nclass TasksList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: this.props.value,\n            index: this.props.index,\n            tasks: [],\n            comments: [],\n            currentIdComment: 0,\n            stage: false\n        };\n        this.setListTasks = this.setListTasks.bind(this);\n        this.handleDeleteTask = this.handleDeleteTask.bind(this);\n        this.handleSetComments = this.handleSetComments.bind(this);\n        this.findCurrentComment = this.findCurrentComment.bind(this);\n        this.setValueByNewFormTasks = this.setValueByNewFormTasks.bind(this);\n    }\n\n    componentWillMount() {\n        console.log(\"TasksList_componentDidMount_place for look in localstore and fetch date\");\n\n        localStorage.getItem('tasks') && this.setState({\n            tasks: JSON.parse(localStorage.getItem('tasks')),\n            isLoading: false\n        });\n    }\n\n    componentDidMount() {\n        if (!localStorage.getItem('tasks')) {\n            this.fetchData();\n        } else {\n            console.log(\"Using data from localStorage.\")\n        }\n\n        this.setState({\n            comments: CommentsList\n        });\n    }\n\n    fetchData() {\n\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        console.log(\"TasksList_componentWillUpdate: Place for update and save data to localstore\", nextProps, this.state.tasks);\n        localStorage.setItem('tasks', JSON.stringify(nextState.tasks));\n    }\n\n    handleDeleteTask(i) {\n        var arrListTasks = this.state.tasks;\n        var i = i;\n        var id;\n        var index = arrListTasks.map( (task, index) => {\n            if (task.id === i) {\n                id = index;\n            }\n        });\n        arrListTasks.splice(id, 1);\n        this.setState({\n            tasks: arrListTasks\n        });\n    }\n\n    handleSetComments(comment, id) {\n        var newComment = [comment];\n        var id = id;\n\n        var newTasksObject = this.state.tasks;\n        newTasksObject.map(task => {\n            if (task.id === id) {\n                task.comments.push(newComment);\n            }\n        });\n\n        this.setState({\n            tasks: {},\n            tasks: newTasksObject\n        });\n    }\n\n    findCurrentComment(i) {\n        this.setState({\n            stage: true,\n            currentIdComment: i\n        });\n    }\n\n    setValueByNewFormTasks(value) {\n        this.setListTasks(value);\n    }\n\n    setListTasks(value) {\n        let task = value;\n        var arrId = [];\n\n        this.state.tasks.map(task => {\n            if (task.id == undefined || task.id == null) {\n                arrId.push(0)\n            } else {\n                arrId.push(task.id);\n            }\n        });\n\n        var id = arrId.length === 0 ? 0 : Math.max(...arrId) + 1;\n\n        let comments = [];\n        this.setState({\n            index: id,\n            tasks: this.state.tasks.concat({task, id, comments})\n        });\n    }\n\n    render() {\n        const tasks = this.state.tasks;\n\n        return (\n            <div className=\"row col-10 page-content\">\n                <div className=\"col-6\">\n                    <div className=\"content\">\n                        <FormTasks getValue={this.setValueByNewFormTasks}/>\n                        <Tasks\n                            tasks={tasks}\n                            deleteTask={this.handleDeleteTask}\n                            listComments={this.findCurrentComment}\n                        />\n                    </div>\n                </div>\n                <div className=\"col-6\">\n                        <CommentsList\n                            tasks={tasks}\n                            currentComment={this.state.currentIdComment}\n                            onStage={this.state.stage}\n                            setArrayOfComments={this.handleSetComments}\n                        />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TasksList;","import React, { Component } from 'react';\nimport FormTasks from './components/FormTasks';\nimport Panal from './components/Panel';\nimport './App.css';\nimport TasksList from \"./components/TasksList\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"panels row h-100 w-100\">\n                <Panal/>\n                <TasksList/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}